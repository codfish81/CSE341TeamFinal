{
  "swagger": "2.0",
  "info": {
    "title": "Flavor Hub API Docs",
    "description": "This is the documentation for Flavor Hub's api endpoints",
    "version": "1.0.0"
  },
  "host": "",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/recipe/addRecipe": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add a new recipe",
        "description": "This route allows you to create a new recipe.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "ingredients": {
                  "example": "any"
                },
                "instructions": {
                  "example": "any"
                },
                "time": {
                  "example": "any"
                },
                "servingSize": {
                  "example": "any"
                },
                "categoryId": {
                  "example": "any"
                },
                "dateAdded": {
                  "example": "any"
                },
                "userId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/recipe/updateRecipe/{recipeId}": {
      "put": {
        "tags": [
          "Recipes"
        ],
        "summary": "Update recipe by id",
        "description": "This route allows you to update a recipe by its id.",
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "example": "any"
                },
                "description": {
                  "example": "any"
                },
                "ingredients": {
                  "example": "any"
                },
                "instructions": {
                  "example": "any"
                },
                "time": {
                  "example": "any"
                },
                "servingSize": {
                  "example": "any"
                },
                "categoryId": {
                  "example": "any"
                },
                "dateChanged": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/recipe/getRecipe/{recipeId}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get a recipe",
        "description": "This route allows you to get a recipe by its id.",
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipe/getCategory/{categoryId}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all recipes of a category",
        "description": "This route allows you to retrieve all recipes of a specific category.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipe/getKeyword/{searchKey}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipes by keyword",
        "description": "This route allows you to retrieve recipes by searching for a keyword.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "searchKey",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipe/getUserRecipes/{userId}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipes by a user",
        "description": "This route allows you to get recipes by a user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipe/getUserRecipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipes by a user",
        "description": "This route allows you to get recipes by a user.",
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipe/deleteRecipe/{recipeId}": {
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete recipe by id",
        "description": "This route allows you to delete a recipe by its id.",
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by User Id",
        "description": "This will get a user by its Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Updates a user by id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "example": "any"
                },
                "lastName": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete user by Id",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new User",
        "description": "This request creates a new user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "New User",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "any"
                },
                "lastName": {
                  "type": "string",
                  "example": "any"
                },
                "email": {
                  "type": "string",
                  "example": "any"
                }
              },
              "required": [
                "firstName",
                "lastName",
                "email"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/modifications/": {
      "get": {
        "tags": [
          "Modifications"
        ],
        "description": "",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "tags": [
          "Modifications"
        ],
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/modifications/{modId}": {
      "get": {
        "tags": [
          "Modifications"
        ],
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "modId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Modifications"
        ],
        "description": "",
        "parameters": [
          {
            "name": "modId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "today_date": {
                  "example": "any"
                },
                "collection": {
                  "example": "any"
                },
                "type": {
                  "example": "any"
                },
                "userId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Modifications"
        ],
        "description": "",
        "parameters": [
          {
            "name": "modId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/modifications/{userId}": {
      "get": {
        "tags": [
          "Modifications"
        ],
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/modifications/{recipeTypeId}": {
      "get": {
        "tags": [
          "Modifications"
        ],
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipeTypeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/comments/{commentId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get Comment by Comment Id",
        "description": "This will get a comment by its Id",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Comment id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "put": {
        "tags": [
          "Comments"
        ],
        "summary": "Update comment",
        "description": "Updates a comment by id",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Comment ID."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "text": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "501": {
            "description": "Not Implemented"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete comment",
        "description": "Delete comment by Id",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Comment id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "502": {
            "description": "Bad Gateway"
          }
        }
      }
    },
    "/comments/users/{userId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get comments by User",
        "description": "This will all comments by a certain user",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User id"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/comments/recipe/{recipeId}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Get Comments by Recipe",
        "description": "This will get all comments by a certain recipe",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "recipeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/comments/": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create a new Comment",
        "description": "This request creates a new comment",
        "parameters": [
          {
            "name": "comment",
            "in": "body",
            "description": "Comment object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "6497d5d064035756f4d29abc"
                },
                "recipeId": {
                  "type": "string",
                  "example": "6497d5d064035756f481def5"
                },
                "text": {
                  "type": "string",
                  "example": "I really like this recipe, but..."
                }
              },
              "required": [
                "userId",
                "recipeId",
                "text"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Ensure guest",
        "description": "This route ensures that the user is not authenticated",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "description": "",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google OAuth callback",
        "description": "This is a callback route for logging in with Google OAuth",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "This route will log the user out",
        "responses": {
          "default": {
            "description": ""
          }
        }
      }
    },
    "/auth/dashboard": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Ensure authentication",
        "description": "This route ensures that the user is authenticated",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  }
}